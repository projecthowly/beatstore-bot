import { create } from "zustand";
import type { Beat, LicenseType, Plan, Session, Seller } from "./types";

/* ========= API base ========= */
const API_BASE =
  (import.meta as any)?.env?.VITE_API_URL?.replace(/\/+$/, "") ||
  "http://localhost:8080";

/* ========= Telegram Data ========= */
// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–º) –∏–ª–∏ –∏–∑ Telegram Web App SDK
function getTelegramDataFromUrl(): {
  telegramId: number | null;
  username: string | null;
  role: "producer" | "artist" | null;
  isNewUser: boolean;
  viewProducerId: number | null;
  startParam: string | null;
} {
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ –±–æ—Ç–∞)
    const params = new URLSearchParams(window.location.search);
    const tgId = params.get("tgId");
    const username = params.get("username");
    const role = params.get("role");
    const isNew = params.get("isNew");

    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç Telegram WebApp SDK (–¥–ª—è direct links)
    let telegramId: number | null = null;
    let usernameResult: string | null = null;
    let viewProducerId: number | null = null; // –í–°–ï–ì–î–ê null - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û startParam –¥–ª—è deeplink!
    let startParam: string | null = null;

    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram WebApp SDK
    const tgWebApp = (window as any).Telegram?.WebApp;
    if (tgWebApp?.initDataUnsafe?.user) {
      const tgUser = tgWebApp.initDataUnsafe.user;
      telegramId = tgUser.id || null;
      usernameResult = tgUser.username || tgUser.first_name || null;
      console.log("üì± –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ Telegram Web App SDK:", tgUser);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º start_param –¥–ª—è –¥–∏–ø–ª–∏–Ω–∫–∞ (Web App direct link format)
      if (tgWebApp.initDataUnsafe.start_param) {
        startParam = tgWebApp.initDataUnsafe.start_param;
        console.log("üîó –ù–∞–π–¥–µ–Ω start_param (deeplink):", startParam);
      }
    }

    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ SDK, –∏—Å–ø–æ–ª—å–∑—É–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±)
    if (!telegramId && tgId) {
      telegramId = parseInt(tgId, 10);
      usernameResult = username || null;
    }

    console.log("üîç getTelegramDataFromUrl:", {
      url: window.location.href,
      urlParams: { tgId, username, role, isNew },
      fromSDK: !!tgWebApp?.initDataUnsafe?.user,
      sdkInitData: tgWebApp?.initDataUnsafe,
      finalData: { telegramId, username: usernameResult, role, isNew, startParam },
      parsedIsNew: isNew === "1",
    });

    return {
      telegramId,
      username: usernameResult,
      role: role === "producer" || role === "artist" ? role : null,
      isNewUser: isNew === "1",
      viewProducerId,
      startParam,
    };
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Telegram –¥–∞–Ω–Ω—ã—Ö:", e);
    return { telegramId: null, username: null, role: null, isNewUser: true, viewProducerId: null, startParam: null };
  }
}

const telegramData = getTelegramDataFromUrl();

/* ========= helpers: –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ URL –¥–ª—è /uploads/* ========= */
function absolutize(url: string): string {
  if (!url) return "";
  if (url.startsWith("http://") || url.startsWith("https://")) return url;
  if (url.startsWith("/uploads/")) return `${API_BASE}${url}`;
  return url;
}
function normalizeBeat(b: Beat): Beat {
  return {
    ...b,
    coverUrl: absolutize(b.coverUrl),
    files: {
      mp3: absolutize(b.files?.mp3 || ""),
      wav: absolutize(b.files?.wav || ""),
      stems: absolutize(b.files?.stems || ""),
    },
  };
}

/* ========= localStorage (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ—Å—Å–∏–∏) ========= */
const LS_SESSION = "gb:session:v1"; // <‚Äî —Ä–æ–ª—å –∏ —Ñ–ª–∞–≥ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏)
const OLD_KEYS = ["gb:beats", "gb_beats_v1", "gb:beats:v2", "gb:profile:v1", "gb:deeplink_used:v1", "gb:has_opened_bot:v1", "gb:app_version", "gb:last_deeplink"]; // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏

function saveSessionToLS(s: Session) {
  try {
    localStorage.setItem(LS_SESSION, JSON.stringify(s));
  } catch {}
}

/* ========= –µ–¥–∏–Ω—ã–π <audio> ========= */
const audio = new Audio();
audio.preload = "none";
audio.crossOrigin = "anonymous";

/* ========= —Ç–∏–ø—ã ========= */
type Prices = { [licenseId: string]: number | null };
type UploadPayload = {
  title: string;
  key: string;
  bpm: number;
  prices: Prices;
  fileUrls: {
    cover: string | null;
    mp3: string | null;
    mp3Untagged?: string | null;
    wav: string | null;
    stems: string | null;
  };
  freeDownload?: boolean;
};
type CartItem = { beatId: string; license: LicenseType };

export type LicenseFileType = "tagged_mp3" | "untagged_mp3" | "mp3_wav" | "mp3_wav_stems";

export type License = {
  id: string;
  name: string;
  defaultPrice: number | null;
  fileType?: LicenseFileType; // –ö–∞–∫–∏–µ —Ñ–∞–π–ª—ã –≤–∫–ª—é—á–µ–Ω—ã –≤ –ª–∏—Ü–µ–Ω–∑–∏—é
};

type AppState = {
  beats: Beat[]; // –¢–µ–∫—É—â–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –±–∏—Ç—ã (–ª–∏—á–Ω—ã–µ –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ)
  personalBeats: Beat[]; // –ö—ç—à –ª–∏—á–Ω—ã—Ö –±–∏—Ç–æ–≤
  globalBeats: Beat[]; // –ö—ç—à –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –±–∏—Ç–æ–≤
  seller: Seller;
  me: Seller;
  session: Session;
  viewingOwnerId: string | null;
  telegramId: number | null; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
  userInitialized: boolean; // –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

  // –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ deeplink)
  isViewerMode: boolean; // true = –ø—Ä–æ—Å–º–æ—Ç—Ä —á—É–∂–æ–≥–æ –±–∏—Ç—Å—Ç–æ—Ä–∞
  viewedProducer: Seller | null; // –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ–≥–æ –ø—Ä–æ–¥—é—Å–µ—Ä–∞
  viewedProducerContactUsername: string | null; // Telegram username –¥–ª—è —Å–≤—è–∑–∏
  viewedProducerBio: string | null; // Bio –ø—Ä–æ–¥—é—Å–µ—Ä–∞
  viewedProducerAvatarUrl: string | null; // –ê–≤–∞—Ç–∞—Ä –ø—Ä–æ–¥—é—Å–µ—Ä–∞

  playingBeatId: string | null;
  isPlaying: boolean;
  currentTime: number;
  duration: number;
  lastBeatUrl: string | null;
  volume: number;

  cart: CartItem[];
  loadCart: () => Promise<void>;

  // –õ–∏—Ü–µ–Ω–∑–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  licenses: License[];
  loadLicenses: () => Promise<void>;
  updateLicense: (licenseId: string, updates: Partial<License>) => Promise<void>;
  addLicense: (license: Omit<License, "id">) => Promise<void>;
  deleteLicense: (licenseId: string) => Promise<void>;

  playerCollapsed: boolean;
  setPlayerCollapsed: (collapsed: boolean) => void;
  togglePlayerCollapsed: () => void;

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –≥–ª–æ–±–∞–ª—å–Ω—ã–º –∏ –ª–∏—á–Ω—ã–º –±–∏—Ç—Å—Ç–æ—Ä–æ–º
  viewingGlobalStore: boolean; // true = –≥–ª–æ–±–∞–ª—å–Ω—ã–π –±–∏—Ç—Å—Ç–æ—Ä, false = –ª–∏—á–Ω—ã–π –±–∏—Ç—Å—Ç–æ—Ä
  storeSwapAnimating: boolean; // true –≤–æ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
  pendingStoreView: boolean | null; // –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ viewingGlobalStore, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è –ø–æ—Å–ª–µ fade-out
  setViewingGlobalStore: (viewing: boolean) => void;
  setStoreSwapAnimating: (animating: boolean) => void;
  setPendingStoreView: (pending: boolean | null) => void;
  toggleStoreView: () => void; // –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –º–µ–∂–¥—É –≥–ª–æ–±–∞–ª—å–Ω—ã–º –∏ –ª–∏—á–Ω—ã–º

  initFromUrl: () => void;
  loadBeats: (userId?: number | null) => Promise<void>;
  switchToPersonalBeats: () => void; // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ª–∏—á–Ω—ã–µ –±–∏—Ç—ã –∏–∑ –∫—ç—à–∞
  switchToGlobalBeats: () => void; // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –±–∏—Ç—ã –∏–∑ –∫—ç—à–∞
  isOwnStore: () => boolean;
  goToOwnStore: () => void;
  exitViewerMode: () => Promise<void>;

  playBeat: (id: string) => void;
  togglePlay: (id: string) => void;
  pause: () => void;
  stopPlaying: () => void;
  seekTo: (sec: number) => void;
  setVolume: (v: number) => void;
  playPrev: () => void;
  playNext: () => void;

  addToCart: (beatId: string, license: LicenseType) => void;
  removeFromCart: (beatId: string, license: LicenseType) => void;
  clearCart: () => void;

  uploadBeat: (payload: UploadPayload) => Promise<void>;
  deleteBeat: (beatId: string) => Promise<void>;

  /** –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∏–∫–∞ (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î) */
  updateNickname: (next: string) => Promise<void>;

  /** –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è (bio –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ—Ü—Å–µ—Ç–∏) */
  updateProfile: (data: {
    bio?: string;
    instagramUrl?: string;
    youtubeUrl?: string;
    soundcloudUrl?: string;
    spotifyUrl?: string;
    contactUsername?: string;
  }) => Promise<void>;

  /** deeplink –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  deeplink: string | null;
  loadDeeplink: () => Promise<void>;
  updateDeeplink: (customName: string) => Promise<{ ok: boolean; error?: string }>;
  getFullDeeplinkUrl: () => string;

  /** –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –ª–∏—Ü–µ–Ω–∑–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–∏—Ç–∞ (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î) */
  updateBeatPrices: (beatId: string, prices: Prices) => Promise<void>;

  /** –≤—ã–±–æ—Ä —Ä–æ–ª–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  selectRole: (role: "producer" | "artist") => void;

  /** —Å–º–µ–Ω–∞ —Ä–æ–ª–∏ (—Ç–æ–ª—å–∫–æ artist ‚Üí producer) */
  changeRole: (role: "producer") => void;
};

export const useApp = create<AppState>((set, get) => {
  try {
    OLD_KEYS.forEach((k) => localStorage.removeItem(k));
  } catch {}

  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –ë–î
  const initialMe: Seller = {
    id: telegramData.telegramId ? `user:${telegramData.telegramId}` : "temp-user",
    slug: telegramData.username || "user",
    storeName: telegramData.username || "User",
    plan: "free" as Plan,
  };

  audio.addEventListener("timeupdate", () =>
    set({ currentTime: audio.currentTime }),
  );
  audio.addEventListener("durationchange", () =>
    set({ duration: Number.isFinite(audio.duration) ? audio.duration : 0 }),
  );
  audio.addEventListener("ended", () => set({ isPlaying: false }));

  // –ù–∞—á–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è (–±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏–∑ –ë–î)
  let initialSession: Session;
  if (telegramData.role) {
    // –î–∞–Ω–Ω—ã–µ –ø—Ä–∏—à–ª–∏ –æ—Ç –±–æ—Ç–∞ —á–µ—Ä–µ–∑ URL
    initialSession = {
      role: telegramData.role,
      isNewUser: telegramData.isNewUser,
    };
    console.log("‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ URL:", initialSession);
  } else {
    // –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è - –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –ë–î –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (—Å–º. –±–ª–æ–∫ –≤—ã—à–µ)
    initialSession = { role: "artist", isNewUser: true };
    console.log("‚è≥ –ù–∞—á–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è (–±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –ë–î):", initialSession);
  }

  return {
    beats: [], // –¢–µ–∫—É—â–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –±–∏—Ç—ã
    personalBeats: [], // –ö—ç—à –ª–∏—á–Ω—ã—Ö –±–∏—Ç–æ–≤
    globalBeats: [], // –ö—ç—à –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –±–∏—Ç–æ–≤
    seller: initialMe,
    me: initialMe,
    session: initialSession,
    viewingOwnerId: initialMe.id,
    telegramId: telegramData.telegramId,
    userInitialized: false, // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ false, —Å—Ç–∞–Ω–µ—Ç true –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î

    // –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ viewProducerId –Ω–µ —Ä–∞–≤–µ–Ω —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
    isViewerMode: !!(telegramData.viewProducerId && telegramData.viewProducerId !== telegramData.telegramId),
    viewedProducer: null, // –ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ë–î
    viewedProducerContactUsername: null,
    viewedProducerBio: null,
    viewedProducerAvatarUrl: null,

    playingBeatId: null,
    isPlaying: false,
    currentTime: 0,
    duration: 0,
    lastBeatUrl: null,
    volume: 0.8,

    cart: [],

    // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ (–±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î)
    licenses: [
      { id: "mp3", name: "MP3", defaultPrice: null },
      { id: "wav", name: "WAV", defaultPrice: null },
      { id: "stems", name: "STEMS", defaultPrice: null },
    ],

    deeplink: null,

    playerCollapsed: false,
    viewingGlobalStore: false, // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ª–∏—á–Ω—ã–π –±–∏—Ç—Å—Ç–æ—Ä
    storeSwapAnimating: false,
    pendingStoreView: null,

    async initFromUrl() {
      const url = new URL(window.location.href);
      const mode = url.searchParams.get("mode");
      const sellerParam = url.searchParams.get("seller");
      if (mode === "link" && sellerParam) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—é—Å–µ—Ä–∞ –ø–æ username –∏–∑ –ë–î
        try {
          const response = await fetch(`${API_BASE}/api/users/byUsername/${sellerParam}`);
          if (response.ok) {
            const data = await response.json();
            const foreignSeller: Seller = {
              id: `user:${data.user.telegram_id}`,
              slug: data.user.username,
              storeName: data.user.store_name || data.user.username,
              plan: data.user.plan || "free",
            };
            set({
              session: { role: "artist", isNewUser: get().session.isNewUser },
              seller: foreignSeller,
              viewingOwnerId: foreignSeller.id,
            });
            console.log("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ–¥—é—Å–µ—Ä –∏–∑ –ë–î:", foreignSeller);
          } else {
            // Fallback –µ—Å–ª–∏ –ø—Ä–æ–¥—é—Å–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
            const foreign: Seller = {
              id: `seller:${sellerParam}`,
              slug: sellerParam,
              storeName: sellerParam,
              plan: "free" as Plan,
            };
            set({
              session: { role: "artist", isNewUser: get().session.isNewUser },
              seller: foreign,
              viewingOwnerId: foreign.id,
            });
            console.warn("‚ö†Ô∏è –ü—Ä–æ–¥—é—Å–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
          }
        } catch (e) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—é—Å–µ—Ä–∞:", e);
        }
      } else {
        // –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ LS
        set({
          session: { role: get().session.role, isNewUser: get().session.isNewUser },
          seller: get().me,
          viewingOwnerId: get().me.id,
        });
      }
    },

    async loadBeats(userId?: number | null) {
      try {
        const isPersonal = !!userId;

        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω userId, –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∏—Ç—ã —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–∏—á–Ω—ã–π –±–∏—Ç—Å—Ç–æ—Ä)
        // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –±–∏—Ç—ã (–≥–ª–æ–±–∞–ª—å–Ω—ã–π –±–∏—Ç—Å—Ç–æ—Ä)
        const url = userId
          ? `${API_BASE}/api/beats?userId=${userId}`
          : `${API_BASE}/api/beats`;

        console.log(`üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∏—Ç—ã${userId ? ` –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}` : ' (–≤—Å–µ)'}...`);
        const res = await fetch(url);
        const data = await res.json();
        const rawBeats: Beat[] = Array.isArray(data)
          ? (data as any)
          : Array.isArray(data?.beats)
            ? data.beats
            : Array.isArray(data?.list)
              ? data.list
              : [];
        const beats = rawBeats.map(normalizeBeat);

        // –ö—ç—à–∏—Ä—É–µ–º –±–∏—Ç—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–∞—Å—Å–∏–≤ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—É—â–∏–µ
        if (isPersonal) {
          set({ personalBeats: beats, beats });
          console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${beats.length} –ª–∏—á–Ω—ã—Ö –±–∏—Ç–æ–≤`);
        } else {
          set({ globalBeats: beats, beats });
          console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${beats.length} –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –±–∏—Ç–æ–≤`);
        }
      } catch (e) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏—Ç–æ–≤ –∏–∑ –ë–î:", e);
        set({ beats: [] });
      }
    },

    switchToPersonalBeats() {
      const { personalBeats } = get();
      set({ beats: personalBeats });
      console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª–∏—á–Ω—ã–µ –±–∏—Ç—ã (${personalBeats.length})`);
    },

    switchToGlobalBeats() {
      const { globalBeats } = get();
      set({ beats: globalBeats });
      console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –±–∏—Ç—ã (${globalBeats.length})`);
    },

    isOwnStore() {
      return get().viewingOwnerId === get().me.id;
    },
    async goToOwnStore() {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∏–∫ –∏–∑ Telegram, –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 15 —Å–∏–º–≤–æ–ª–æ–≤)
      const currentMe = get().me;
      if (!currentMe.storeName || currentMe.storeName === "Howly") {
        const telegramUsername = telegramData.username || "Producer";
        const truncatedUsername = telegramUsername.slice(0, 15);
        const updatedMe: Seller = { ...currentMe, storeName: truncatedUsername };
        set({ me: updatedMe, seller: updatedMe });
        console.log("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∏–∫ –∏–∑ Telegram:", truncatedUsername);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        const telegramId = get().telegramId;
        if (telegramId) {
          try {
            await fetch(`${API_BASE}/api/users/${telegramId}`, {
              method: "PATCH",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ username: truncatedUsername }),
            });
            console.log("‚úÖ –ù–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î");
          } catch (e) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∏–∫–∞ –≤ –ë–î:", e);
          }
        }
      }

      const newSession: Session = {
        role: "producer",
        isNewUser: false
      };
      set({
        session: newSession,
        seller: get().me,
        viewingOwnerId: get().me.id,
      });
      saveSessionToLS(newSession);  // ‚úÖ –ü–µ—Ä—Å–∏—Å—Ç–∏–º –≤ localStorage

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –≤ –ë–î
      const telegramId = get().telegramId;
      if (telegramId) {
        try {
          await fetch(`${API_BASE}/api/users/${telegramId}`, {
            method: "PATCH",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ role: "producer" }),
          });
          console.log("‚úÖ –†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ë–î: producer");
        } catch (e) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏ –≤ –ë–î:", e);
        }
      }

      const url = new URL(window.location.href);
      url.searchParams.delete("mode");
      url.searchParams.delete("seller");
      window.history.replaceState({}, "", url.toString());
    },

    async exitViewerMode() {
      console.log("üö™ –í—ã—Ö–æ–¥ –∏–∑ viewer mode");

      const telegramId = get().telegramId;

      // –û—á–∏—â–∞–µ–º viewed_producer_id –≤ –ë–î
      if (telegramId) {
        try {
          await fetch(`${API_BASE}/api/users/${telegramId}/viewer-mode`, {
            method: "PATCH",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ viewed_producer_id: null }),
          });
          console.log("‚úÖ Viewer mode –æ—á–∏—â–µ–Ω –≤ –ë–î");
        } catch (e) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ viewer mode –≤ –ë–î:", e);
        }
      }

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ viewer mode
      set({
        isViewerMode: false,
        viewedProducer: null,
        viewedProducerContactUsername: null,
        viewedProducerBio: null,
        viewedProducerAvatarUrl: null,
        seller: get().me,
        viewingOwnerId: get().me.id,
      });

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∏—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
      const role = get().session.role;

      if (role === "producer" && telegramId) {
        // –î–ª—è –ø—Ä–æ–¥—é—Å–µ—Ä–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ –ª–∏—á–Ω—ã–µ –±–∏—Ç—ã
        get().loadBeats(telegramId);
      } else if (role === "artist") {
        // –î–ª—è –∞—Ä—Ç–∏—Å—Ç–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –±–∏—Ç—ã
        get().loadBeats(null);
      }

      console.log("‚úÖ Viewer mode –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—Ç –≤ —Ä–∞–±–æ—á–∏–π —Ä–µ–∂–∏–º");
    },

    /* === –ü–õ–ï–ï–† === */
    playBeat(id) {
      const { beats, lastBeatUrl } = get();
      const beat = beats.find((b) => b.id === id);
      const url = beat?.files?.mp3 || "";
      if (!url) return;

      try {
        audio.pause();
        audio.currentTime = 0;
      } catch {}
      if (lastBeatUrl !== url) {
        audio.src = url;
        set({ lastBeatUrl: url, duration: 0, currentTime: 0 });
      }
      audio.volume = get().volume;
      audio
        .play()
        .then(() =>
          set({ playingBeatId: id, isPlaying: true, playerCollapsed: false }),
        )
        .catch(() => {});
    },

    togglePlay(id) {
      const { playingBeatId, isPlaying } = get();
      if (playingBeatId === id) {
        if (isPlaying) {
          audio.pause();
          set({ isPlaying: false });
        } else {
          audio
            .play()
            .then(() => set({ isPlaying: true }))
            .catch(() => {});
        }
      } else {
        get().playBeat(id);
      }
    },

    pause() {
      try {
        audio.pause();
      } catch {}
      set({ isPlaying: false });
    },

    stopPlaying() {
      try {
        audio.pause();
        audio.currentTime = 0;
        audio.src = "";
      } catch {}
      set({
        playingBeatId: null,
        isPlaying: false,
        currentTime: 0,
        duration: 0,
        lastBeatUrl: null,
      });
    },

    seekTo(sec) {
      try {
        audio.currentTime = sec;
        set({ currentTime: sec });
      } catch {}
    },
    setVolume(v) {
      const vol = Math.min(1, Math.max(0, v));
      audio.volume = vol;
      set({ volume: vol });
    },

    playPrev() {
      const { beats, playingBeatId } = get();
      if (!playingBeatId || beats.length === 0) return;
      const idx = beats.findIndex((b) => b.id === playingBeatId);
      const prev = beats[(idx - 1 + beats.length) % beats.length];
      if (prev) get().playBeat(prev.id);
    },
    playNext() {
      const { beats, playingBeatId } = get();
      if (!playingBeatId || beats.length === 0) return;
      const idx = beats.findIndex((b) => b.id === playingBeatId);
      const next = beats[(idx + 1) % beats.length];
      if (next) get().playBeat(next.id);
    },

    setPlayerCollapsed(collapsed) {
      set({ playerCollapsed: collapsed });
    },
    togglePlayerCollapsed() {
      set((state) => ({ playerCollapsed: !state.playerCollapsed }));
    },

    setViewingGlobalStore(viewing) {
      set({ viewingGlobalStore: viewing });
    },
    setStoreSwapAnimating(animating) {
      set({ storeSwapAnimating: animating });
    },
    setPendingStoreView(pending) {
      set({ pendingStoreView: pending });
    },
    toggleStoreView() {
      set((state) => ({ viewingGlobalStore: !state.viewingGlobalStore }));
    },

    /* === –ö–û–†–ó–ò–ù–ê === */
    async loadCart() {
      const telegramId = get().telegramId;
      if (!telegramId) return;

      try {
        const response = await fetch(`${API_BASE}/api/users/${telegramId}/cart`);
        if (response.ok) {
          const data = await response.json();
          if (data.cart && Array.isArray(data.cart)) {
            const cart = data.cart.map((item: any) => ({
              beatId: item.beatId,
              license: item.license,
            }));
            set({ cart });
            console.log("‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –ë–î:", cart);
          }
        }
      } catch (e) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã:", e);
      }
    },

    async addToCart(beatId, license) {
      const exists = get().cart.some(
        (c) => c.beatId === beatId && c.license === license,
      );
      if (exists) return;

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      set({ cart: [...get().cart, { beatId, license }] });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
      const telegramId = get().telegramId;
      if (!telegramId) return;

      try {
        await fetch(`${API_BASE}/api/users/${telegramId}/cart`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ beatId, licenseId: license }),
        });
        console.log("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É –≤ –ë–î:", { beatId, license });
      } catch (e) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:", e);
        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
        set({
          cart: get().cart.filter(
            (c) => !(c.beatId === beatId && c.license === license),
          ),
        });
      }
    },

    async removeFromCart(beatId, license) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      const newCart = get().cart.filter(
        (c) => !(c.beatId === beatId && c.license === license),
      );
      set({ cart: newCart });

      // –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
      const telegramId = get().telegramId;
      if (!telegramId) return;

      try {
        await fetch(`${API_BASE}/api/users/${telegramId}/cart`, {
          method: "DELETE",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ beatId, licenseId: license }),
        });
        console.log("‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –≤ –ë–î:", { beatId, license });
      } catch (e) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã:", e);
      }
    },

    async clearCart() {
      // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      set({ cart: [] });

      // –û—á–∏—â–∞–µ–º –≤ –ë–î
      const telegramId = get().telegramId;
      if (!telegramId) return;

      try {
        await fetch(`${API_BASE}/api/users/${telegramId}/cart/all`, {
          method: "DELETE",
        });
        console.log("‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞ –≤ –ë–î");
      } catch (e) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã:", e);
      }
    },

    /* === –ó–ê–ì–†–£–ó–ö–ê === */
    async uploadBeat(payload) {
      const endpoint = `${API_BASE}/api/beats/upload`;

      // –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON –≤–º–µ—Å—Ç–æ FormData (—Ñ–∞–π–ª—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã)
      const me = get().me;

      const body = {
        title: payload.title,
        key: payload.key,
        bpm: payload.bpm,
        prices: payload.prices,
        coverUrl: payload.fileUrls.cover,
        mp3Url: payload.fileUrls.mp3,
        mp3UntaggedUrl: payload.fileUrls.mp3Untagged || null,
        wavUrl: payload.fileUrls.wav,
        stemsUrl: payload.fileUrls.stems || "",
        freeDownload: payload.freeDownload || false,
        authorId: me.id,
        authorName: me.storeName,
        authorSlug: me.slug,
      };

      const res = await fetch(endpoint, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(body),
      });

      const data = await res.json();
      if (!res.ok || !data?.ok) throw new Error(data?.error || "upload failed");

      const newBeat: Beat = normalizeBeat({
        ...data.beat,
        prices: {
          mp3: payload.prices.mp3 ?? null,
          wav: payload.prices.wav ?? null,
          stems: payload.prices.stems ?? null,
        },
      } as Beat);
      const next = [newBeat, ...get().beats];
      set({ beats: next });
      console.log("‚úÖ –ë–∏—Ç –¥–æ–±–∞–≤–ª–µ–Ω:", newBeat.title);

      // üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—ã –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (defaultPrice === null)
      const licensesToUpdate: License[] = [];
      const currentLicenses = get().licenses;

      console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö —Ü–µ–Ω:", {
        currentLicenses: currentLicenses.map(l => ({ id: l.id, defaultPrice: l.defaultPrice })),
        payloadPrices: payload.prices
      });

      currentLicenses.forEach((license) => {
        const priceValue = payload.prices[license.id];
        console.log(`üîç –õ–∏—Ü–µ–Ω–∑–∏—è ${license.id}: defaultPrice=${license.defaultPrice}, priceValue=${priceValue}`);
        // –ï—Å–ª–∏ defaultPrice === null –∏ —Ü–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
        if (license.defaultPrice === null && priceValue !== null && priceValue !== undefined) {
          console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É ${priceValue} –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –¥–ª—è –ª–∏—Ü–µ–Ω–∑–∏–∏ ${license.id}`);
          licensesToUpdate.push({
            ...license,
            defaultPrice: priceValue,
          });
        }
      });

      // –ï—Å–ª–∏ –µ—Å—Ç—å –ª–∏—Ü–µ–Ω–∑–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
      if (licensesToUpdate.length > 0) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        const updatedLicenses = currentLicenses.map((lic) => {
          const updated = licensesToUpdate.find((l) => l.id === lic.id);
          return updated || lic;
        });
        set({ licenses: updatedLicenses });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        const telegramId = get().telegramId;
        if (telegramId) {
          try {
            await fetch(`${API_BASE}/api/users/${telegramId}/licenses`, {
              method: "PATCH",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ licenses: updatedLicenses }),
            });
            console.log("‚úÖ –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ü–µ–Ω—ã –ª–∏—Ü–µ–Ω–∑–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏:", licensesToUpdate);
          } catch (e) {
            console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö —Ü–µ–Ω:", e);
          }
        }
      }
    },

    async deleteBeat(beatId: string) {
      const telegramId = get().telegramId;
      if (!telegramId) {
        console.error("‚ùå –ù–µ—Ç telegramId –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–∏—Ç–∞");
        return;
      }

      try {
        const response = await fetch(`${API_BASE}/api/beats/${beatId}`, {
          method: "DELETE",
        });

        if (!response.ok) {
          throw new Error("Failed to delete beat");
        }

        console.log("‚úÖ –ë–∏—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î:", beatId);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –±–∏—Ç–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        await get().loadBeats(telegramId);
      } catch (e) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–∏—Ç–∞:", e);
        throw e;
      }
    },

    /* === –ü–†–û–§–ò–õ–¨: —Å–º–µ–Ω–∞ –Ω–∏–∫–∞ (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î) === */
    async updateNickname(nextName: string) {
      const name = nextName.trim().slice(0, 15); // ‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 15 —Å–∏–º–≤–æ–ª–æ–≤
      if (!name) return;

      const mePrev = get().me;
      const meNext: Seller = { ...mePrev, storeName: name };

      // 1) –æ–±–Ω–æ–≤–∏–º me, seller –ª–æ–∫–∞–ª—å–Ω–æ
      set((state) => {
        const nextSeller =
          state.viewingOwnerId === mePrev.id
            ? ({ ...state.seller, storeName: name } as Seller)
            : state.seller;
        return { me: meNext, seller: nextSeller };
      });

      // 2) –æ–±–Ω–æ–≤–∏–º –∞–≤—Ç–æ—Ä–∞ –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –±–∏—Ç–∞—Ö (–µ—Å–ª–∏ –∞–≤—Ç–æ—Ä —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞–º–∏)
      const updatedBeats = get().beats.map((b) => {
        const anyBeat: any = { ...b };
        if (
          anyBeat.author &&
          (anyBeat.author.id === mePrev.id ||
            anyBeat.author.slug === mePrev.slug)
        ) {
          anyBeat.author = { ...anyBeat.author, name };
        }
        return anyBeat as Beat;
      });
      set({ beats: updatedBeats });

      // 3) —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
      const telegramId = get().telegramId;
      if (telegramId) {
        try {
          await fetch(`${API_BASE}/api/users/${telegramId}`, {
            method: "PATCH",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ username: name }),
          });
          console.log("‚úÖ –ù–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î:", name);
        } catch (e) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∏–∫–∞ –≤ –ë–î:", e);
        }
      }
    },

    /* === –ü–†–û–§–ò–õ–¨: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ bio –∏ —Å—Å—ã–ª–æ–∫ (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î) === */
    async updateProfile(data) {
      const telegramId = get().telegramId;
      if (!telegramId) return;

      try {
        await fetch(`${API_BASE}/api/users/${telegramId}`, {
          method: "PATCH",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            bio: data.bio,
            instagram_url: data.instagramUrl,
            youtube_url: data.youtubeUrl,
            soundcloud_url: data.soundcloudUrl,
            spotify_url: data.spotifyUrl,
            contact_username: data.contactUsername,
          }),
        });
        console.log("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î");
      } catch (e) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ë–î:", e);
        throw e;
      }
    },

    /* === DEEPLINK === */
    async loadDeeplink() {
      const telegramId = get().telegramId;
      if (!telegramId) return;

      try {
        const response = await fetch(`${API_BASE}/api/users/${telegramId}/deeplink`);
        if (response.ok) {
          const data = await response.json();
          if (data.deeplink) {
            set({ deeplink: data.deeplink.custom_name });
            console.log("‚úÖ Deeplink –∑–∞–≥—Ä—É–∂–µ–Ω:", data.deeplink.custom_name);
          }
        }
      } catch (e) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ deeplink:", e);
      }
    },

    async updateDeeplink(customName: string) {
      const telegramId = get().telegramId;
      if (!telegramId) return { ok: false, error: "no-telegram-id" };

      try {
        const response = await fetch(`${API_BASE}/api/users/${telegramId}/deeplink`, {
          method: "PATCH",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ customName }),
        });

        const data = await response.json();

        if (data.ok && data.deeplink) {
          set({ deeplink: data.deeplink.custom_name });
          console.log("‚úÖ Deeplink –æ–±–Ω–æ–≤–ª–µ–Ω:", data.deeplink.custom_name);
          return { ok: true };
        } else {
          console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è deeplink:", data.error);
          return { ok: false, error: data.error || "unknown-error" };
        }
      } catch (e) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ deeplink:", e);
        return { ok: false, error: "network-error" };
      }
    },

    getFullDeeplinkUrl() {
      const deeplink = get().deeplink;
      if (!deeplink) return "";

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç Web App direct link
      const botName = import.meta.env.VITE_BOT_NAME || "GridBeatStore_bot";
      return `https://t.me/${botName}/app?startapp=${deeplink}`;
    },

    /* === –£–ü–†–ê–í–õ–ï–ù–ò–ï –õ–ò–¶–ï–ù–ó–ò–Ø–ú–ò === */
    async loadLicenses() {
      const telegramId = get().telegramId;
      if (!telegramId) return;

      try {
        const response = await fetch(`${API_BASE}/api/users/${telegramId}/licenses`);
        if (response.ok) {
          const data = await response.json();
          if (data.licenses && Array.isArray(data.licenses)) {
            set({ licenses: data.licenses });
            console.log("‚úÖ –õ–∏—Ü–µ–Ω–∑–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î:", data.licenses);
          }
        }
      } catch (e) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–π –∏–∑ –ë–î:", e);
      }
    },

    async updateLicense(licenseId: string, updates: Partial<License>) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      const updatedLicenses = get().licenses.map((lic) =>
        lic.id === licenseId ? { ...lic, ...updates } : lic
      );
      set({ licenses: updatedLicenses });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
      const telegramId = get().telegramId;
      if (!telegramId) return;

      try {
        await fetch(`${API_BASE}/api/users/${telegramId}/licenses`, {
          method: "PATCH",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ licenses: updatedLicenses }),
        });
        console.log("‚úÖ –õ–∏—Ü–µ–Ω–∑–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –ë–î");
      } catch (e) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–π –≤ –ë–î:", e);
      }
    },

    async addLicense(license: Omit<License, "id">) {
      const newLicense: License = {
        ...license,
        id: `custom_${Date.now()}`,
      };

      const updatedLicenses = [...get().licenses, newLicense];
      set({ licenses: updatedLicenses });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
      const telegramId = get().telegramId;
      if (!telegramId) return;

      try {
        await fetch(`${API_BASE}/api/users/${telegramId}/licenses`, {
          method: "PATCH",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ licenses: updatedLicenses }),
        });
        console.log("‚úÖ –ù–æ–≤–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ë–î:", newLicense);
      } catch (e) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏ –≤ –ë–î:", e);
      }
    },

    async deleteLicense(licenseId: string) {
      const updatedLicenses = get().licenses.filter((l) => l.id !== licenseId);
      set({ licenses: updatedLicenses });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
      const telegramId = get().telegramId;
      if (!telegramId) return;

      try {
        await fetch(`${API_BASE}/api/users/${telegramId}/licenses`, {
          method: "PATCH",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ licenses: updatedLicenses }),
        });
        console.log("‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ë–î");
      } catch (e) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏–∑ –ë–î:", e);
      }
    },

    async updateBeatPrices(beatId: string, prices: Prices) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ë–î
      try {
        const response = await fetch(`${API_BASE}/api/beats/${beatId}/prices`, {
          method: "PATCH",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ prices }),
        });

        if (!response.ok) {
          throw new Error("Failed to update prices in database");
        }

        console.log(`‚úÖ –¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –ë–î –¥–ª—è –±–∏—Ç–∞ ${beatId}:`, prices);

        // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –±–∏—Ç—ã —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const telegramId = get().telegramId;
        if (telegramId) {
          await get().loadBeats(telegramId);
        }
      } catch (e) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω –≤ –ë–î:", e);
        throw e;
      }
    },

    /* === –†–û–õ–ò === */
    async selectRole(role: "producer" | "artist") {
      const currentIsNew = get().session.isNewUser;
      console.log("üé≠ selectRole –≤—ã–∑–≤–∞–Ω:", {
        role,
        telegramId: get().telegramId,
        isNewUser: currentIsNew,
      });

      const newSession: Session = { role, isNewUser: false };
      set({ session: newSession });
      saveSessionToLS(newSession);

      const telegramId = get().telegramId;
      if (!telegramId) {
        console.warn("‚ö†Ô∏è telegramId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î!");
        return;
      }

      try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å...");
        const checkResponse = await fetch(`${API_BASE}/api/users/${telegramId}`);

        if (checkResponse.status === 404) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï —Å–æ–∑–¥–∞–Ω - —Å–æ–∑–¥–∞—ë–º –µ–≥–æ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é
          console.log("üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω, —Å–æ–∑–¥–∞—ë–º —Å —Ä–æ–ª—å—é:", role);
          const createResponse = await fetch(`${API_BASE}/api/users`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              telegram_id: telegramId,
              username: telegramData.username,
              role, // –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ä–æ–ª—å
            }),
          });
          const createData = await createResponse.json();
          console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:", createData);
        } else {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å
          console.log("üì§ –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ PATCH:", role);
          const response = await fetch(`${API_BASE}/api/users/${telegramId}`, {
            method: "PATCH",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ role }),
          });
          const data = await response.json();
          console.log("‚úÖ –†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞:", { status: response.status, data });
        }
      } catch (e) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏:", e);
      }
    },

    async changeRole(role: "producer") {
      const currentRole = get().session.role;
      // –†–∞–∑—Ä–µ—à–∞–µ–º —Å–º–µ–Ω—É —Ç–æ–ª—å–∫–æ —Å artist –Ω–∞ producer
      if (currentRole === "artist") {
        const newSession: Session = { role, isNewUser: false };
        set({ session: newSession });
        saveSessionToLS(newSession);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å telegramId
        const telegramId = get().telegramId;
        if (telegramId) {
          try {
            await fetch(`${API_BASE}/api/users/${telegramId}/role`, {
              method: "PATCH",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ role }),
            });

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã —Ä–æ–ª–∏ –Ω–∞ producer
            await get().loadLicenses();
            console.log("‚úÖ –õ–∏—Ü–µ–Ω–∑–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã —Ä–æ–ª–∏ –Ω–∞ producer");
          } catch (e) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–æ–ª–∏:", e);
          }
        }
      }
    },
  };
});

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è store
(async () => {
  console.log("üöÄ –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, API_BASE:", API_BASE);
  try {
    // –ë–∏—Ç—ã –ù–ï –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω–æ! –û–Ω–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ CatalogView –∏–ª–∏ GlobalMarketView

    // –ï—Å–ª–∏ –µ—Å—Ç—å telegramId, –ø—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    if (telegramData.telegramId) {
      try {
        console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î...", telegramData.telegramId);
        const response = await fetch(`${API_BASE}/api/users/${telegramData.telegramId}`);
        console.log("üì° –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.status, response.statusText);

        if (response.status === 404) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ù–ï–¢ –≤ –ë–î - —Å–æ–∑–¥–∞—ë–º —Å—Ä–∞–∑—É –∫–∞–∫ –ê–†–¢–ò–°–¢–ê
          console.log("üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, —Å–æ–∑–¥–∞—ë–º –∫–∞–∫ –∞—Ä—Ç–∏—Å—Ç–∞...");
          const createResponse = await fetch(`${API_BASE}/api/users`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              telegram_id: telegramData.telegramId,
              username: telegramData.username,
              role: "artist", // ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë–º –∫–∞–∫ –∞—Ä—Ç–∏—Å—Ç–∞
            }),
          });
          const createData = await createResponse.json();
          console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å role=artist:", createData);

          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞
          const newUserSession: Session = { role: "artist", isNewUser: false };
          useApp.setState({ session: newUserSession, userInitialized: true });
          saveSessionToLS(newUserSession);
          console.log("üé≠ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞—Ä—Ç–∏—Å—Ç)");

          // –ó–∞–≥—Ä—É–∂–∞–µ–º deeplink –∏ –∫–æ—Ä–∑–∏–Ω—É (–ª–∏—Ü–µ–Ω–∑–∏–π —É –∞—Ä—Ç–∏—Å—Ç–æ–≤ –Ω–µ—Ç)
          useApp.getState().loadDeeplink();
          useApp.getState().loadCart();

        } else if (response.ok) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –°–£–©–ï–°–¢–í–£–ï–¢ - –∑–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
          const data = await response.json();
          console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î:", data.user);
          if (data.user) {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É (–ø–ª–∞–Ω) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            let userPlan: Plan = "free";
            try {
              const subResponse = await fetch(`${API_BASE}/api/users/${telegramData.telegramId}/subscription`);
              if (subResponse.ok) {
                const subData = await subResponse.json();
                if (subData.subscription?.plan) {
                  userPlan = subData.subscription.plan.name.toLowerCase() as Plan;
                  console.log("‚úÖ –ü–ª–∞–Ω –∑–∞–≥—Ä—É–∂–µ–Ω:", userPlan);
                }
              }
            } catch (e) {
              console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º Free:", e);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
            const userFromDB: Seller = {
              id: `user:${data.user.telegram_id}`,
              slug: data.user.username || telegramData.username || "user",
              storeName: data.user.store_name || data.user.username || telegramData.username || "User",
              plan: userPlan,
            };

            const existingUserSession: Session = {
              role: data.user.role || "artist", // —Ñ–æ–ª–ª–±—ç–∫ –µ—Å–ª–∏ null
              isNewUser: false,
            };

            // –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–ï–ó userInitialized
            useApp.setState({
              me: userFromDB,
              seller: userFromDB,
              session: existingUserSession,
            });
            saveSessionToLS(existingUserSession);
            console.log("üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î:", userFromDB);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏—Ü–µ–Ω–∑–∏–∏ –¥–ª—è –ø—Ä–æ–¥—é—Å–µ—Ä–∞, deeplink –∏ –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è –≤—Å–µ—Ö
            if (existingUserSession.role === "producer") {
              useApp.getState().loadLicenses();
            }
            useApp.getState().loadDeeplink();
            useApp.getState().loadCart();

            // ===== DEEPLINK PROCESSING =====
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º startParam (–ø–µ—Ä–µ—Ö–æ–¥ –ø–æ deeplink)
            if (telegramData.startParam) {
              console.log("üîó –û–±—Ä–∞–±–æ—Ç–∫–∞ deeplink –∏–∑ startParam:", telegramData.startParam);

              try {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—é—Å–µ—Ä–∞ –ø–æ deeplink
                const deeplinkResponse = await fetch(`${API_BASE}/api/deeplink/${telegramData.startParam}`);
                if (deeplinkResponse.ok) {
                  const deeplinkData = await deeplinkResponse.json();
                  if (deeplinkData.ok && deeplinkData.producer) {
                    const producer = deeplinkData.producer;
                    console.log("‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–¥—é—Å–µ—Ä –ø–æ deeplink:", producer);

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–≤–æ–π –ª–∏ —ç—Ç–æ deeplink
                    if (producer.telegram_id === telegramData.telegramId) {
                      console.log("‚ÑπÔ∏è –≠—Ç–æ —Å–≤–æ–π deeplink, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ");
                    } else {
                      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º viewed_producer_id –≤ –ë–î
                      await fetch(`${API_BASE}/api/users/${telegramData.telegramId}/viewer-mode`, {
                        method: "PATCH",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ viewed_producer_id: producer.telegram_id }),
                      });
                      console.log("‚úÖ viewed_producer_id —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ë–î");

                      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º viewer mode
                      const viewedProducer: Seller = {
                        id: `user:${producer.telegram_id}`,
                        slug: producer.username || "producer",
                        storeName: producer.username || "Producer",
                        plan: "free" as Plan,
                      };

                      useApp.setState({
                        isViewerMode: true,
                        viewedProducer,
                        viewedProducerContactUsername: producer.contact_username || null,
                        viewedProducerBio: producer.bio || null,
                        viewedProducerAvatarUrl: producer.avatar_url || null,
                        seller: viewedProducer,
                        viewingOwnerId: viewedProducer.id,
                      });

                      // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∏—Ç—ã –ø—Ä–æ–¥—é—Å–µ—Ä–∞
                      await useApp.getState().loadBeats(producer.telegram_id);
                      console.log("‚úÖ Guest mode –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ–¥—é—Å–µ—Ä–∞:", producer.username);
                    }
                  }
                } else {
                  console.warn("‚ö†Ô∏è Deeplink –Ω–µ –Ω–∞–π–¥–µ–Ω:", telegramData.startParam);
                }
              } catch (e) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ deeplink:", e);
              }

              // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ startParam
              useApp.setState({ userInitialized: true });
            }
            // –ù–µ—Ç deeplink - –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º, –æ—á–∏—â–∞–µ–º viewed_producer_id –µ—Å–ª–∏ –±—ã–ª
            else {
              console.log("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ deeplink, –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º");

              // –ï—Å–ª–∏ –≤ –ë–î –±—ã–ª viewed_producer_id (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ guest mode), –æ—á–∏—â–∞–µ–º –µ–≥–æ
              if (data.user.viewed_producer_id) {
                console.log("üßπ –û—á–∏—â–∞–µ–º viewed_producer_id –ø—Ä–∏ –æ–±—ã—á–Ω–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ –±–æ—Ç–∞");
                try {
                  await fetch(`${API_BASE}/api/users/${telegramData.telegramId}/viewer-mode`, {
                    method: "PATCH",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ viewed_producer_id: null }),
                  });
                  console.log("‚úÖ viewed_producer_id –æ—á–∏—â–µ–Ω –≤ –ë–î");
                } catch (e) {
                  console.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ viewed_producer_id:", e);
                }
              }

              // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –±–∏—Ç—ã –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–µ–∑ "–º–æ—Ä–≥–∞–Ω–∏—è")
              if (existingUserSession.role === "artist") {
                console.log("üì¶ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –±–∏—Ç–æ–≤ –¥–ª—è –∞—Ä—Ç–∏—Å—Ç–∞");
                await useApp.getState().loadBeats(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –±–∏—Ç—ã
              } else if (existingUserSession.role === "producer" && telegramData.telegramId) {
                console.log("üì¶ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ª–∏—á–Ω—ã—Ö –±–∏—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥—é—Å–µ—Ä–∞");
                await useApp.getState().loadBeats(telegramData.telegramId); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏—á–Ω—ã–µ –±–∏—Ç—ã
              }

              useApp.setState({ userInitialized: true });
            }
          } else {
            console.warn("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Å–µ—Å—Å–∏—é");
            useApp.setState({ userInitialized: true });
          }
        } else {
          console.error("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:", response.status);
          useApp.setState({ userInitialized: true });
        }
      } catch (e) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/—Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", e);
        useApp.setState({ userInitialized: true }); // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–Ω—É—Ç—å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫–µ
      }
    } else {
      console.log("‚ö†Ô∏è –ù–µ—Ç telegramId, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      useApp.setState({ userInitialized: true }); // –ù–µ—Ç telegramId - —Å—Ä–∞–∑—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    }
  } catch (e) {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", e);
    useApp.setState({ userInitialized: true }); // –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º UI
  }
  console.log("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, userInitialized =", useApp.getState().userInitialized);
})();
