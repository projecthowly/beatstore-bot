import { Telegraf, Markup } from "telegraf";
import * as db from "./database.js";

export function createBot(token: string, webappUrl: string) {
  const bot = new Telegraf(token);

  // /start
  bot.start(async (ctx) => {
    console.log(`üîî /start –ø–æ–ª—É—á–µ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${ctx.from?.id} (${ctx.from?.username})`);

    const telegramId = ctx.from?.id;
    const username = ctx.from?.username || ctx.from?.first_name || "User";
    const name = ctx.from?.first_name || "–¥—Ä—É–∂–∏—â–µ";

    if (!telegramId) {
      return await ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à Telegram ID.");
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
      let user = await db.findUserByTelegramId(telegramId);
      let isNewUser = false;

      // –ï—Å–ª–∏ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–æ–∑–¥–∞—ë–º –µ–≥–æ –°–†–ê–ó–£ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–æ–ª—å—é "artist"
      if (!user) {
        console.log(`üëã –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username} (${telegramId}) - —Å–æ–∑–¥–∞—ë–º –≤ –ë–î`);
        user = await db.createUser({
          telegram_id: telegramId,
          username: username || null,
          avatar_url: null,
          role: "artist", // –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–æ–ª—å, –∏–∑–º–µ–Ω–∏—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤ –º–æ–¥–∞–ª–∫–µ
        });
        isNewUser = true;
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ –ë–î —Å ID: ${user.id}`);
      } else {
        console.log(`üîô –í–µ—Ä–Ω—É–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username} (${telegramId}), —Ä–æ–ª—å: ${user.role}`);
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const url = buildWebappUrl(webappUrl, {
        telegramId,
        username,
        role: user.role, // —Ä–µ–∞–ª—å–Ω–∞—è —Ä–æ–ª—å –∏–∑ –ë–î
        isNewUser,
      });

      await ctx.reply(
        `–ü—Ä–∏–≤–µ—Ç, ${name}! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω.`,
        Markup.keyboard([
          [Markup.button.webApp("Open", url)]
        ])
          .resize()
          .oneTime()
      );
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.");
    }
  });

  // fallback
  bot.on("message", async (ctx) => {
    const telegramId = ctx.from?.id;
    const username = ctx.from?.username || ctx.from?.first_name || "User";

    if (!telegramId) {
      return await ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à Telegram ID.");
    }

    try {
      let user = await db.findUserByTelegramId(telegramId);
      let isNewUser = false;

      if (!user) {
        user = await db.createUser({
          telegram_id: telegramId,
          username: username || null,
          avatar_url: null,
          role: "artist",
        });
        isNewUser = true;
      }

      const url = buildWebappUrl(webappUrl, {
        telegramId,
        username,
        role: user.role,
        isNewUser,
      });

      await ctx.reply(
        "–ñ–º–∏ –∫–Ω–æ–ø–∫—É Open, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω.",
        Markup.keyboard([[Markup.button.webApp("Open", url)]])
          .resize()
          .oneTime()
      );
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  });

  // –•–µ–ª–ø–µ—Ä –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è URL —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  function buildWebappUrl(baseUrl: string, params: {
    telegramId: number;
    username: string;
    role: string;
    isNewUser: boolean;
  }) {
    if (!baseUrl) return "";
    const url = new URL(baseUrl);
    url.searchParams.set("tgId", params.telegramId.toString());
    url.searchParams.set("username", params.username);
    url.searchParams.set("role", params.role);
    url.searchParams.set("isNew", params.isNewUser ? "1" : "0");
    return url.toString();
  }

  // –º–∞–ª–µ–Ω—å–∫–∏–π —Ö–µ–ª–ø–µ—Ä: –¥–æ–±–∞–≤–∏–º buildId –¥–ª—è –∫—ç—à–∞
  function withBuildId(url: string, buildId?: string) {
    if (!url) return "";
    const u = new URL(url);
    if (buildId) u.searchParams.set("v", buildId);
    return u.toString();
  }

  // –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—Ä—É–∂—É (–¥–ª—è /refresh-menu)
  (bot as any).__withBuildId = withBuildId;
  (bot as any).__buildWebappUrl = buildWebappUrl;

  return bot;
}

export async function setMenuButton(bot: Telegraf, text: string, webappUrl: string, buildId?: string) {
  const withBuildId = (bot as any).__withBuildId as (u: string, b?: string) => string;
  const url = withBuildId ? withBuildId(webappUrl, buildId) : webappUrl;

  // –í–∞–∂–Ω–æ: —Å–≤–æ–π—Å—Ç–≤–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è menuButton (camelCase), –Ω–µ menu_button
  await bot.telegram.setChatMenuButton({
    menuButton: {
      type: "web_app",
      text,
      web_app: { url }
    }
  });
}
