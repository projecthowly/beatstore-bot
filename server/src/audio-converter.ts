import ffmpeg from "fluent-ffmpeg";
import path from "path";
import fs from "fs/promises";

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç WAV —Ñ–∞–π–ª –≤ MP3 —Å —Ç–µ–≥–æ–º
 * @param wavPath - –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É WAV —Ñ–∞–π–ª—É
 * @param outputPath - –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è MP3 —Å —Ç–µ–≥–æ–º
 * @param producerName - –∏–º—è –ø—Ä–æ–¥—é—Å–µ—Ä–∞ –¥–ª—è —Ç–µ–≥–∞
 */
export async function convertWavToTaggedMp3(
  wavPath: string,
  outputPath: string,
  producerName: string
): Promise<void> {
  return new Promise((resolve, reject) => {
    ffmpeg(wavPath)
      .audioCodec("libmp3lame")
      .audioBitrate("320k") // –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
      .outputOptions([
        `-metadata`,
        `comment=PROD BY ${producerName}`,
        `-metadata`,
        `artist=${producerName}`,
      ])
      .on("end", () => {
        console.log(`‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ MP3 —Å —Ç–µ–≥–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${outputPath}`);
        resolve();
      })
      .on("error", (err: Error) => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ MP3 —Å —Ç–µ–≥–æ–º:`, err);
        reject(err);
      })
      .save(outputPath);
  });
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç WAV —Ñ–∞–π–ª –≤ MP3 –±–µ–∑ —Ç–µ–≥–∞
 * @param wavPath - –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É WAV —Ñ–∞–π–ª—É
 * @param outputPath - –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è MP3 –±–µ–∑ —Ç–µ–≥–∞
 */
export async function convertWavToUntaggedMp3(
  wavPath: string,
  outputPath: string
): Promise<void> {
  return new Promise((resolve, reject) => {
    ffmpeg(wavPath)
      .audioCodec("libmp3lame")
      .audioBitrate("320k") // –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
      .outputOptions([
        `-map_metadata`, `-1`, // –£–¥–∞–ª—è–µ–º –≤—Å–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      ])
      .on("end", () => {
        console.log(`‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ MP3 –±–µ–∑ —Ç–µ–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${outputPath}`);
        resolve();
      })
      .on("error", (err: Error) => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ MP3 –±–µ–∑ —Ç–µ–≥–∞:`, err);
        reject(err);
      })
      .save(outputPath);
  });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π WAV —Ñ–∞–π–ª: —Å–æ–∑–¥–∞–µ—Ç MP3 —Å —Ç–µ–≥–æ–º –∏ MP3 –±–µ–∑ —Ç–µ–≥–∞
 * @param wavPath - –ø—É—Ç—å –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É WAV —Ñ–∞–π–ª—É
 * @param producerName - –∏–º—è –ø—Ä–æ–¥—é—Å–µ—Ä–∞ –¥–ª—è —Ç–µ–≥–∞
 * @returns –æ–±—ä–µ–∫—Ç —Å –ø—É—Ç—è–º–∏ –∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
 */
export async function processUploadedAudio(
  wavPath: string,
  producerName: string
): Promise<{
  mp3TaggedPath: string;
  mp3UntaggedPath: string;
  wavPath: string;
}> {
  const dir = path.dirname(wavPath);
  const basename = path.basename(wavPath, path.extname(wavPath));

  const mp3TaggedPath = path.join(dir, `${basename}_tagged.mp3`);
  const mp3UntaggedPath = path.join(dir, `${basename}_untagged.mp3`);

  console.log(`üéµ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: ${wavPath}`);
  console.log(`   MP3 —Å —Ç–µ–≥–æ–º: ${mp3TaggedPath}`);
  console.log(`   MP3 –±–µ–∑ —Ç–µ–≥–∞: ${mp3UntaggedPath}`);

  try {
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    await Promise.all([
      convertWavToTaggedMp3(wavPath, mp3TaggedPath, producerName),
      convertWavToUntaggedMp3(wavPath, mp3UntaggedPath),
    ]);

    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);

    return {
      mp3TaggedPath,
      mp3UntaggedPath,
      wavPath,
    };
  } catch (error) {
    // –û—á–∏—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    try {
      await fs.unlink(mp3TaggedPath).catch(() => {});
      await fs.unlink(mp3UntaggedPath).catch(() => {});
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤:", e);
    }
    throw error;
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
 * @param producerUsername - –Ω–∏–∫ –ø—Ä–æ–¥—é—Å–µ—Ä–∞
 * @param beatTitle - –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ç–∞
 * @param bpm - BPM –±–∏—Ç–∞
 * @param key - —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–∏—Ç–∞
 * @returns –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
 */
export function generateFreeDownloadFilename(
  producerUsername: string,
  beatTitle: string,
  bpm: number | null,
  key: string | null
): string {
  const parts: string[] = [`@${producerUsername}`];

  if (bpm) {
    parts.push(`${bpm}BPM`);
  }

  if (key) {
    parts.push(key);
  }

  parts.push(beatTitle);

  // –£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
  return parts
    .join(" ")
    .replace(/[<>:"/\\|?*]/g, "")
    .trim();
}
