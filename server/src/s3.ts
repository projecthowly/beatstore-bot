const EasyYandexS3 = require("easy-yandex-s3").default;
import path from "path";

/**
 * S3 –∫–ª–∏–µ–Ω—Ç –¥–ª—è Yandex Object Storage
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç easy-yandex-s3 –¥–ª—è –Ω–∞—Ç–∏–≤–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ø–Ω–¥–µ–∫—Å–∞
 *
 * –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://github.com/powerdot/easy-yandex-s3
 */
const s3 = new EasyYandexS3({
  auth: {
    accessKeyId: process.env.S3_ACCESS_KEY || "",
    secretAccessKey: process.env.S3_SECRET_KEY || "",
  },
  Bucket: process.env.S3_BUCKET || "beatstore",
  debug: false, // –í–∫–ª—é—á–∏—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
});

/**
 * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ S3 –∏ –≤–µ—Ä–Ω—É—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π URL
 *
 * @param filePath - –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
 * @param s3Key - –ö–ª—é—á (–ø—É—Ç—å) —Ñ–∞–π–ª–∞ –≤ S3 bucket (–Ω–∞–ø—Ä–∏–º–µ—Ä: "audio/mp3/beat_123.mp3")
 * @param contentType - MIME —Ç–∏–ø —Ñ–∞–π–ª–∞ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ easy-yandex-s3)
 * @returns –ü—É–±–ª–∏—á–Ω—ã–π URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
 *
 * @example
 * const url = await uploadToS3("/tmp/file.mp3", "audio/mp3/beat_123.mp3", "audio/mpeg");
 * // url: https://storage.yandexcloud.net/beatstore/audio/mp3/beat_123.mp3
 */
export async function uploadToS3(
  filePath: string,
  s3Key: string,
  _contentType: string // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - easy-yandex-s3 –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
): Promise<string> {
  try {
    console.log(`üì§ Uploading ${s3Key} to Yandex Object Storage...`);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ easy-yandex-s3
    // path - –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É
    // save_name - true –æ–∑–Ω–∞—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è (–º—ã –ø–µ—Ä–µ–¥–∞—ë–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å —Å –ø–∞–ø–∫–∞–º–∏)
    const upload = await s3.Upload(
      {
        path: filePath,
        save_name: true,
        name: s3Key, // –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –≤ –±–∞–∫–µ—Ç–µ –≤–∫–ª—é—á–∞—è –ø–∞–ø–∫–∏
      },
      "/" // –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    );

    if (!upload || !upload.Location) {
      throw new Error("Upload failed: no Location returned");
    }

    const publicUrl = upload.Location;
    console.log(`‚úÖ Uploaded to S3: ${publicUrl}`);

    return publicUrl;
  } catch (error) {
    console.error(`‚ùå S3 upload failed for ${s3Key}:`, error);
    throw new Error(`Failed to upload file to S3: ${error}`);
  }
}

/**
 * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∏–∑ Buffer –≤ S3
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –ø–∞–º—è—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å multer)
 *
 * @param buffer - –ë—É—Ñ–µ—Ä —Å –¥–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞
 * @param s3Key - –ö–ª—é—á —Ñ–∞–π–ª–∞ –≤ S3 (–Ω–∞–ø—Ä–∏–º–µ—Ä: "covers/image.png")
 * @param contentType - MIME —Ç–∏–ø (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ easy-yandex-s3)
 * @returns –ü—É–±–ª–∏—á–Ω—ã–π URL
 */
export async function uploadBufferToS3(
  buffer: Buffer,
  s3Key: string,
  _contentType: string // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - easy-yandex-s3 –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
): Promise<string> {
  try {
    console.log(`üì§ Uploading buffer ${s3Key} to Yandex Object Storage...`);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º Buffer —á–µ—Ä–µ–∑ easy-yandex-s3
    const upload = await s3.Upload(
      {
        buffer: buffer,
        name: s3Key, // –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –≤–∫–ª—é—á–∞—è –ø–∞–ø–∫–∏
      },
      "/" // –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    );

    if (!upload || !upload.Location) {
      throw new Error("Upload failed: no Location returned");
    }

    const publicUrl = upload.Location;
    console.log(`‚úÖ Uploaded buffer to S3: ${publicUrl}`);

    return publicUrl;
  } catch (error) {
    console.error(`‚ùå S3 buffer upload failed for ${s3Key}:`, error);
    throw new Error(`Failed to upload buffer to S3: ${error}`);
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å MIME —Ç–∏–ø –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
 */
export function getMimeType(filePath: string): string {
  const ext = path.extname(filePath).toLowerCase();
  const mimeTypes: Record<string, string> = {
    ".mp3": "audio/mpeg",
    ".wav": "audio/wav",
    ".flac": "audio/flac",
    ".ogg": "audio/ogg",
    ".m4a": "audio/mp4",
    ".zip": "application/zip",
    ".rar": "application/x-rar-compressed",
    ".jpg": "image/jpeg",
    ".jpeg": "image/jpeg",
    ".png": "image/png",
    ".gif": "image/gif",
    ".webp": "image/webp",
  };
  return mimeTypes[ext] || "application/octet-stream";
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è S3
 *
 * @param folder - –ü–∞–ø–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "audio/mp3", "covers", "stems")
 * @param filename - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
 * @returns –£–Ω–∏–∫–∞–ª—å–Ω—ã–π S3 –∫–ª—é—á
 *
 * @example
 * generateS3Key("audio/mp3", "mybeat.mp3")
 * // "audio/mp3/1738567890_abc123_mybeat.mp3"
 */
export function generateS3Key(folder: string, filename: string): string {
  const ext = path.extname(filename);
  const basename = path.basename(filename, ext);
  const safeName = basename.replace(/[^a-z0-9_\-.]+/gi, "_");
  const timestamp = Date.now();
  const random = Math.random().toString(36).slice(2, 8);
  return `${folder}/${timestamp}_${random}_${safeName}${ext}`;
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
export { s3 };
