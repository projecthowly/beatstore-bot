import { S3Client, PutObjectCommand, CopyObjectCommand, DeleteObjectCommand, DeleteObjectsCommand } from "@aws-sdk/client-s3";
import fs from "fs";
import path from "path";

/**
 * S3 –∫–ª–∏–µ–Ω—Ç –¥–ª—è Yandex Object Storage
 * Endpoint: https://storage.yandexcloud.net
 * Region: ru-central1
 */
const s3Client = new S3Client({
  region: process.env.S3_REGION || "ru-central1",
  endpoint: process.env.S3_ENDPOINT || "https://storage.yandexcloud.net",
  credentials: {
    accessKeyId: process.env.S3_ACCESS_KEY || "",
    secretAccessKey: process.env.S3_SECRET_KEY || "",
  },
  forcePathStyle: true, // Path-style URLs –¥–ª—è Yandex Object Storage
});

/**
 * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ S3 –∏ –≤–µ—Ä–Ω—É—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π URL
 *
 * @param filePath - –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
 * @param s3Key - –ö–ª—é—á (–ø—É—Ç—å) —Ñ–∞–π–ª–∞ –≤ S3 bucket (–Ω–∞–ø—Ä–∏–º–µ—Ä: "audio/beat_123.mp3")
 * @param contentType - MIME —Ç–∏–ø —Ñ–∞–π–ª–∞
 * @returns –ü—É–±–ª–∏—á–Ω—ã–π URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
 *
 * @example
 * const url = await uploadToS3("/tmp/file.mp3", "audio/beat_123.mp3", "audio/mpeg");
 * // url: https://storage.yandexcloud.net/beatstore/audio/beat_123.mp3
 */
export async function uploadToS3(
  filePath: string,
  s3Key: string,
  contentType: string
): Promise<string> {
  const bucketName = process.env.S3_BUCKET || "beatstore";

  try {
    // –ß–∏—Ç–∞–µ–º –≤–µ—Å—å —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å (–ø—Ä–æ—Å—Ç–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–µ–∑ multipart)
    const fileContent = fs.readFileSync(filePath);

    console.log(`üì§ Uploading ${s3Key} (${(fileContent.length / 1024 / 1024).toFixed(2)} MB)...`);

    const command = new PutObjectCommand({
      Bucket: bucketName,
      Key: s3Key,
      Body: fileContent,
      ContentType: contentType,
      ACL: "public-read", // –Ø–≤–Ω–æ –¥–µ–ª–∞–µ–º —Ñ–∞–π–ª –ø—É–±–ª–∏—á–Ω—ã–º
    });

    await s3Client.send(command);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL (Yandex Object Storage)
    const publicUrl = `https://storage.yandexcloud.net/${bucketName}/${s3Key}`;
    console.log(`‚úÖ Uploaded to S3: ${publicUrl}`);

    return publicUrl;
  } catch (error) {
    console.error(`‚ùå S3 upload failed for ${s3Key}:`, error);
    throw new Error(`Failed to upload file to S3: ${error}`);
  }
}

/**
 * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∏–∑ Buffer –≤ S3
 * –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–º—è—Ç–∏ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ –¥–∏—Å–∫
 *
 * @param buffer - –ë—É—Ñ–µ—Ä —Å –¥–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞
 * @param s3Key - –ö–ª—é—á —Ñ–∞–π–ª–∞ –≤ S3
 * @param contentType - MIME —Ç–∏–ø
 * @returns –ü—É–±–ª–∏—á–Ω—ã–π URL
 */
export async function uploadBufferToS3(
  buffer: Buffer,
  s3Key: string,
  contentType: string
): Promise<string> {
  const bucketName = process.env.S3_BUCKET || "beatstore";

  try {
    const command = new PutObjectCommand({
      Bucket: bucketName,
      Key: s3Key,
      Body: buffer,
      ContentType: contentType,
      ACL: "public-read", // –Ø–≤–Ω–æ –¥–µ–ª–∞–µ–º —Ñ–∞–π–ª –ø—É–±–ª–∏—á–Ω—ã–º
    });

    await s3Client.send(command);

    const publicUrl = `https://storage.yandexcloud.net/${bucketName}/${s3Key}`;
    console.log(`‚úÖ Uploaded buffer to S3: ${publicUrl}`);

    return publicUrl;
  } catch (error) {
    console.error(`‚ùå S3 buffer upload failed for ${s3Key}:`, error);
    throw new Error(`Failed to upload buffer to S3: ${error}`);
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å MIME —Ç–∏–ø –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
 */
export function getMimeType(filePath: string): string {
  const ext = path.extname(filePath).toLowerCase();
  const mimeTypes: Record<string, string> = {
    ".mp3": "audio/mpeg",
    ".wav": "audio/wav",
    ".flac": "audio/flac",
    ".ogg": "audio/ogg",
    ".m4a": "audio/mp4",
    ".zip": "application/zip",
    ".rar": "application/x-rar-compressed",
    ".jpg": "image/jpeg",
    ".jpeg": "image/jpeg",
    ".png": "image/png",
    ".gif": "image/gif",
    ".webp": "image/webp",
  };
  return mimeTypes[ext] || "application/octet-stream";
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è S3
 *
 * @param folder - –ü–∞–ø–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "audio", "covers", "stems")
 * @param filename - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
 * @returns –£–Ω–∏–∫–∞–ª—å–Ω—ã–π S3 –∫–ª—é—á
 *
 * @example
 * generateS3Key("audio", "mybeat.mp3")
 * // "audio/1738567890_abc123_mybeat.mp3"
 */
export function generateS3Key(folder: string, filename: string): string {
  const ext = path.extname(filename);
  const basename = path.basename(filename, ext);
  const safeName = basename.replace(/[^a-z0-9_\-.]+/gi, "_");
  const timestamp = Date.now();
  const random = Math.random().toString(36).slice(2, 8);
  return `${folder}/${timestamp}_${random}_${safeName}${ext}`;
}

/**
 * –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –≤–Ω—É—Ç—Ä–∏ S3 bucket
 * @param sourceKey - –ò—Å—Ö–æ–¥–Ω—ã–π –∫–ª—é—á —Ñ–∞–π–ª–∞
 * @param destinationKey - –¶–µ–ª–µ–≤–æ–π –∫–ª—é—á —Ñ–∞–π–ª–∞
 * @returns URL –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
 */
export async function copyFileInS3(
  sourceKey: string,
  destinationKey: string
): Promise<string> {
  const bucketName = process.env.S3_BUCKET || "beatstore";
  const bucketUrl = process.env.S3_BUCKET_URL || `https://storage.yandexcloud.net/${bucketName}`;

  try {
    console.log(`üìã Copying ${sourceKey} ‚Üí ${destinationKey}...`);

    const copyCommand = new CopyObjectCommand({
      Bucket: bucketName,
      CopySource: `${bucketName}/${sourceKey}`,
      Key: destinationKey,
      ACL: "public-read",
    });

    await s3Client.send(copyCommand);

    const newUrl = `${bucketUrl}/${destinationKey}`;
    console.log(`‚úÖ File copied: ${newUrl}`);
    return newUrl;
  } catch (error) {
    console.error(`‚ùå Failed to copy ${sourceKey} to ${destinationKey}:`, error);
    throw error;
  }
}

/**
 * –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∏–∑ S3
 * @param s3Key - –ö–ª—é—á —Ñ–∞–π–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
 */
export async function deleteFileFromS3(s3Key: string): Promise<void> {
  const bucketName = process.env.S3_BUCKET || "beatstore";

  try {
    console.log(`üóëÔ∏è Deleting ${s3Key}...`);

    const deleteCommand = new DeleteObjectCommand({
      Bucket: bucketName,
      Key: s3Key,
    });

    await s3Client.send(deleteCommand);
    console.log(`‚úÖ File deleted: ${s3Key}`);
  } catch (error) {
    console.error(`‚ùå Failed to delete ${s3Key}:`, error);
    throw error;
  }
}

/**
 * –£–¥–∞–ª–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –∏–∑ S3 –ø–æ URL
 * @param urls - –ú–∞—Å—Å–∏–≤ –ø—É–±–ª–∏—á–Ω—ã—Ö URL —Ñ–∞–π–ª–æ–≤
 * @returns –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
 */
export async function deleteMultipleFromS3(urls: string[]): Promise<number> {
  const bucketName = process.env.S3_BUCKET || "beatstore";
  const bucketUrl = process.env.S3_BUCKET_URL || `https://storage.yandexcloud.net/${bucketName}`;

  let deletedCount = 0;

  for (const url of urls) {
    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á –∏–∑ URL
      const s3Key = url.replace(bucketUrl + "/", "").replace(bucketUrl, "");

      if (!s3Key || s3Key === url) {
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å S3 –∫–ª—é—á –∏–∑ URL: ${url}`);
        continue;
      }

      await deleteFileFromS3(s3Key);
      deletedCount++;
    } catch (error) {
      console.error(`‚ùå Failed to delete file ${url}:`, error);
    }
  }

  return deletedCount;
}

/**
 * –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª –≤ S3 (–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª)
 * @param sourceKey - –ò—Å—Ö–æ–¥–Ω—ã–π –∫–ª—é—á —Ñ–∞–π–ª–∞
 * @param destinationKey - –¶–µ–ª–µ–≤–æ–π –∫–ª—é—á —Ñ–∞–π–ª–∞
 * @returns URL –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
 */
export async function moveFileInS3(
  sourceKey: string,
  destinationKey: string
): Promise<string> {
  // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
  const newUrl = await copyFileInS3(sourceKey, destinationKey);

  // –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
  await deleteFileFromS3(sourceKey);

  console.log(`‚úÖ File moved: ${sourceKey} ‚Üí ${destinationKey}`);
  return newUrl;
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
export { s3Client };
