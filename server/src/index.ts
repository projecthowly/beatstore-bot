import 'dotenv/config';
import express from 'express';
import { createBot } from './bot';

const BOT_TOKEN = process.env.BOT_TOKEN;
const WEBAPP_URL = process.env.WEBAPP_URL;
const BASE_URL = process.env.BASE_URL || '';
const PORT = Number(process.env.PORT || 8080);

if (!BOT_TOKEN) {
  console.error('‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env');
  process.exit(1);
}

async function main() {
  console.log('üîß –ö–æ–Ω—Ñ–∏–≥:', { PORT, BASE_URL: BASE_URL || '(–ø—É—Å—Ç–æ)', WEBAPP_URL: WEBAPP_URL || '(–ø—É—Å—Ç–æ)' });

  const app = express();
  app.use(express.json());

  // health-check –æ—Ç–≤–µ—á–∞–µ—Ç –≤—Å–µ–≥–¥–∞
  app.get('/health', (_req, res) => {
    res.json({ ok: true, mode: BASE_URL ? 'webhook' : 'polling' });
  });

  const server = app.listen(PORT, () => {
    console.log(`üåê HTTP —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–Ω—è—Ç:  http://localhost:${PORT}  (–æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞...)`);
  });

  // –∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
  const stop = async () => {
    console.log('‚èπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞‚Ä¶');
    try { server.close(); } catch {}
    try { await bot.stop(); } catch {}
    process.exit(0);
  };
  process.on('SIGINT', stop);
  process.on('SIGTERM', stop);

  // --- TELEGRAM BOT ---
  console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞‚Ä¶');
  const bot = createBot(BOT_TOKEN, WEBAPP_URL);

  const webhookPath = `/webhook/${bot.secretPathComponent()}`;

  try {
    if (BASE_URL) {
      // WEBHOOK —Ä–µ–∂–∏–º
      const webhookUrl = `${BASE_URL}${webhookPath}`;
      await bot.telegram.setWebhook(webhookUrl);
      app.use(webhookPath, bot.webhookCallback(webhookPath));
      console.log(`‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`);
      console.log('‚úÖ –ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∞–ø–¥–µ–π—Ç—ã —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫');
    } else {
      // POLLING —Ä–µ–∂–∏–º (–¥–µ—Ñ–æ–ª—Ç)
      await bot.telegram.deleteWebhook().catch(() => {});
      await bot.launch();
      console.log('‚úÖ Bot –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ long polling');
    }
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', e);
    console.log('‚ÑπÔ∏è HTTP —Å–µ—Ä–≤–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, /health –¥–æ—Å—Ç—É–ø–µ–Ω.');
  }
}

main().catch((e) => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–∞:', e);
  process.exit(1);
});
