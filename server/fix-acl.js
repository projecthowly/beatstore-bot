/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ACL public-read –Ω–∞ –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –≤ –±–∞–∫–µ—Ç–µ
 */

import { S3Client, ListObjectsV2Command, PutObjectAclCommand } from "@aws-sdk/client-s3";
import dotenv from "dotenv";

dotenv.config();

const s3Client = new S3Client({
  region: process.env.S3_REGION || "ru-central1",
  endpoint: process.env.S3_ENDPOINT || "https://storage.yandexcloud.net",
  credentials: {
    accessKeyId: process.env.S3_ACCESS_KEY || "",
    secretAccessKey: process.env.S3_SECRET_KEY || "",
  },
  forcePathStyle: true,
});

const BUCKET_NAME = process.env.S3_BUCKET || "beatstore";

async function listAllObjects() {
  console.log(`üìã –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∫–µ—Ç–µ "${BUCKET_NAME}"...\n`);

  const objects = [];
  let continuationToken = undefined;

  try {
    do {
      const command = new ListObjectsV2Command({
        Bucket: BUCKET_NAME,
        ContinuationToken: continuationToken,
      });

      const response = await s3Client.send(command);

      if (response.Contents) {
        objects.push(...response.Contents);
        console.log(`   –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${response.Contents.length}`);
      }

      continuationToken = response.NextContinuationToken;
    } while (continuationToken);

    console.log(`\n‚úÖ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∫–µ—Ç–µ: ${objects.length}\n`);
    return objects;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞:`, error.message);
    throw error;
  }
}

async function setPublicAcl(key) {
  try {
    const command = new PutObjectAclCommand({
      Bucket: BUCKET_NAME,
      Key: key,
      ACL: "public-read",
    });

    await s3Client.send(command);
    return true;
  } catch (error) {
    console.error(`   ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${key}:`, error.message);
    return false;
  }
}

async function fixAllAcls() {
  console.log(`üöÄ –ù–∞—á–∏–Ω–∞—é —É—Å—Ç–∞–Ω–æ–≤–∫—É ACL public-read –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤...\n`);

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    const objects = await listAllObjects();

    if (objects.length === 0) {
      console.log("‚ÑπÔ∏è  –ë–∞–∫–µ—Ç –ø—É—Å—Ç–æ–π, –Ω–µ—á–µ–≥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å");
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º ACL –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    let successCount = 0;
    let failCount = 0;

    for (let i = 0; i < objects.length; i++) {
      const obj = objects[i];
      console.log(`[${i + 1}/${objects.length}] –û–±–Ω–æ–≤–ª—è—é ACL –¥–ª—è: ${obj.Key}`);

      const success = await setPublicAcl(obj.Key);
      if (success) {
        successCount++;
        console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ`);
      } else {
        failCount++;
      }
    }

    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
    console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${successCount}`);
    console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${failCount}`);
    console.log(`\n‚úÖ –ì–û–¢–û–í–û! –í—Å–µ —Ñ–∞–π–ª—ã —Ç–µ–ø–µ—Ä—å –ø—É–±–ª–∏—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã\n`);

  } catch (error) {
    console.error(`\n‚ùå –û–®–ò–ë–ö–ê:`, error);
    process.exit(1);
  }
}

fixAllAcls();
