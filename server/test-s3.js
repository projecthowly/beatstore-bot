/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Yandex Object Storage
 */

import { S3Client, PutObjectCommand } from "@aws-sdk/client-s3";
import fs from "fs";

import dotenv from "dotenv";
dotenv.config();

const s3Client = new S3Client({
  region: process.env.S3_REGION || "ru-central1",
  endpoint: process.env.S3_ENDPOINT || "https://storage.yandexcloud.net",
  credentials: {
    accessKeyId: process.env.S3_ACCESS_KEY || "",
    secretAccessKey: process.env.S3_SECRET_KEY || "",
  },
  forcePathStyle: true,
});

async function testUpload() {
  console.log("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –∑–∞–≥—Ä—É–∑–∫—É –≤ Yandex Object Storage...\n");

  console.log("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:");
  console.log("  - Endpoint:", process.env.S3_ENDPOINT);
  console.log("  - Region:", process.env.S3_REGION);
  console.log("  - Bucket:", process.env.S3_BUCKET);
  console.log("  - Access Key:", process.env.S3_ACCESS_KEY?.substring(0, 10) + "...");
  console.log("  - Force Path Style: true\n");

  try {
    // –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    const testContent = `Test file created at ${new Date().toISOString()}`;
    const testKey = `test/test-${Date.now()}.txt`;

    console.log(`üì§ –ó–∞–≥—Ä—É–∂–∞—é —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: ${testKey}...`);

    const command = new PutObjectCommand({
      Bucket: process.env.S3_BUCKET || "beatstore",
      Key: testKey,
      Body: Buffer.from(testContent),
      ContentType: "text/plain",
      ACL: "public-read", // –î–µ–ª–∞–µ–º —Ñ–∞–π–ª –ø—É–±–ª–∏—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º
    });

    await s3Client.send(command);

    const bucketName = process.env.S3_BUCKET || "beatstore";
    const publicUrl = `https://storage.yandexcloud.net/${bucketName}/${testKey}`;
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!`);
    console.log(`üìç URL: ${publicUrl}\n`);

    console.log("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! S3 —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.");

  } catch (error) {
    console.error("‚ùå –û–®–ò–ë–ö–ê:", error.message);
    console.error("\n–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:");
    console.error(error);

    console.log("\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù!");
  }
}

testUpload();
